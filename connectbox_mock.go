// Code generated by MockGen. DO NOT EDIT.
// Source: connectbox.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetricsClient is a mock of MetricsClient interface.
type MockMetricsClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsClientMockRecorder
}

// MockMetricsClientMockRecorder is the mock recorder for MockMetricsClient.
type MockMetricsClientMockRecorder struct {
	mock *MockMetricsClient
}

// NewMockMetricsClient creates a new mock instance.
func NewMockMetricsClient(ctrl *gomock.Controller) *MockMetricsClient {
	mock := &MockMetricsClient{ctrl: ctrl}
	mock.recorder = &MockMetricsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsClient) EXPECT() *MockMetricsClientMockRecorder {
	return m.recorder
}

// GetMetrics mocks base method.
func (m *MockMetricsClient) GetMetrics(ctx context.Context, fn string, out any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx, fn, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockMetricsClientMockRecorder) GetMetrics(ctx, fn, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockMetricsClient)(nil).GetMetrics), ctx, fn, out)
}

// Login mocks base method.
func (m *MockMetricsClient) Login(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockMetricsClientMockRecorder) Login(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockMetricsClient)(nil).Login), ctx)
}

// Logout mocks base method.
func (m *MockMetricsClient) Logout(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockMetricsClientMockRecorder) Logout(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockMetricsClient)(nil).Logout), ctx)
}
