// Code generated by MockGen. DO NOT EDIT.
// Source: connectbox.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConnectBox is a mock of ConnectBox interface.
type MockConnectBox struct {
	ctrl     *gomock.Controller
	recorder *MockConnectBoxMockRecorder
}

// MockConnectBoxMockRecorder is the mock recorder for MockConnectBox.
type MockConnectBoxMockRecorder struct {
	mock *MockConnectBox
}

// NewMockConnectBox creates a new mock instance.
func NewMockConnectBox(ctrl *gomock.Controller) *MockConnectBox {
	mock := &MockConnectBox{ctrl: ctrl}
	mock.recorder = &MockConnectBoxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectBox) EXPECT() *MockConnectBoxMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockConnectBox) Get(ctx context.Context, fn string, out any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, fn, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockConnectBoxMockRecorder) Get(ctx, fn, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConnectBox)(nil).Get), ctx, fn, out)
}

// Login mocks base method.
func (m *MockConnectBox) Login(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockConnectBoxMockRecorder) Login(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockConnectBox)(nil).Login), ctx)
}

// Logout mocks base method.
func (m *MockConnectBox) Logout(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockConnectBoxMockRecorder) Logout(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockConnectBox)(nil).Logout), ctx)
}
